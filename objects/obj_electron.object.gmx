<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_electron</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_speed = 0;
//direction = image_angle;

physics_mass_properties(phy_mass, 0, 0, phy_inertia);
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//direction = image_angle + 90;
phy_rotation = phy_rotation % 360;

if keyboard_check(vk_enter) {
    image_index = 1;
} else {
    image_index = 0;
}

show_debug_message(phy_rotation);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_angle -= 5;
phy_rotation += 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_angle += 5;
phy_rotation -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement = 90 / room_speed;
//speed += movement;

terminal_velocity_x = 1000;
terminal_velocity_y = 1000;

magnitude = 10;
angle = (phy_rotation - 90) * pi / 180;

xforce = magnitude * cos(angle);
yforce = magnitude * sin(angle);

if (phy_linear_velocity_x &gt; -terminal_velocity_x and
   phy_linear_velocity_x &lt; terminal_velocity_x) and
   (phy_linear_velocity_y &gt; -terminal_velocity_y and
   phy_linear_velocity_y &lt; terminal_velocity_y) {
    physics_apply_force(obj_electron.x, obj_electron.y, xforce, yforce);
} else if (phy_linear_velocity_x &lt; -terminal_velocity_x or
   phy_linear_velocity_x &gt; terminal_velocity_x) and
   (phy_linear_velocity_y &gt; -terminal_velocity_y and
   phy_linear_velocity_y &lt; terminal_velocity_y) {
    physics_apply_force(obj_electron.x, obj_electron.y, 0, yforce);
} else if (phy_linear_velocity_x &gt; -terminal_velocity_x and
   phy_linear_velocity_x &lt; terminal_velocity_x) and
   (phy_linear_velocity_y &lt; -terminal_velocity_y or
   phy_linear_velocity_y &gt; terminal_velocity_y) {
    physics_apply_force(obj_electron.x, obj_electron.y, xforce, 0);
} else {

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>400,260</point>
    <point>96,398</point>
  </PhysicsShapePoints>
</object>
